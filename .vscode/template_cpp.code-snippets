{
	// Place your cpp workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }

	"Standard cpp competitive template": {
		"scope": "cpp",
		"prefix": "comp()",
		"body": [
			"#define __FAST_COMPILE__", "#ifndef __TEMPLATES__", "#if defined(__FAST_COMPILE__)",
			"#include <iostream>", "#include <cstdint>", "#include <algorithm>",
			"#include <vector>", "#include <set>", "#include <map>",
			"#else", "#include <bits/stdc++.h>", "#endif\n", "using namespace std;\n",
			"#define all(x) begin(x), end(x)\n",
			
			"string input() {", "\tstring text;", "\tgetline(cin, text);", "\treturn text;\n}",
			"template<typename _Tp = int> _Tp",
			"next() {", "\t_Tp value;", "\tcin >> value;", "\treturn value;\n}",
			"template <typename _T1, typename _T2> pair<_T1, _T2>",
			"next() {", "\tauto first = next<_T1>();", "\tauto second = next<_T2>();", "\treturn make_pair(first, second);\n}",
			"template <typename _Sequence> _Sequence",
			"next(size_t _Nm) {", "\t_Sequence c(_Nm);", "\tfor (auto& value : c) cin >> value;", "\treturn c;\n}\n",
			
			"template<typename _Tp> void",
			"print(const _Tp& value, const string end = \"\") {", "\tcout << value << end;\n}",
			"template<typename _Tp1, typename _Tp2> void",
			"print(const pair<_Tp1, _Tp2>& value, const string end = \"\") {",
    		"\tcout << value.first << ' ' \n\t\t << value.second << end;\n}",
			"template<typename _Tp> void",
			"print(const vector<_Tp>& list, const string sep = \" \", const string end = \"\\n\") {\n",
			"\tif (list.empty())", "\t\treturn print(end);\n",
			"\tauto __first = std::begin(list);", "\tauto __last  = std::end(list) - 1;\n",
			"\tfor (; __first != __last; ++__first)", "\t\tprint(*__first, sep);\n", "\tprint(*__first, end);\n}",
			"template<typename _Tp> void",
			"print(const vector<vector<_Tp>>& list, const string sep = \"\\n\", const string end = \"\\n\") {\n",
    		"\tif (list.empty())", "\t\treturn print(end);\n",
			"\tauto __first = std::begin(list);", "\tauto __last  = std::end(list) - 1;\n",
    		"\tfor (; __first != __last; ++__first)", "\t\tprint(*__first, \" \", sep);\n", "\tprint(*__first, \" \", end);\n}\n",
			"#endif\n\n",

			"const auto solve() {\n", "\t$0", "\n\treturn 0;\n}\n\n",
			"int main() {\n", "\tios::sync_with_stdio(0);\n\tcin.tie(0);\n",
			"\tconst int T = next<int>();\n", "\tfor (int tc = 1; tc <= T; tc++)", "\t\tcout << solve() << '\\n';\n\n}\n"

		],
		"description": "Stantard competitive template"
	},


}